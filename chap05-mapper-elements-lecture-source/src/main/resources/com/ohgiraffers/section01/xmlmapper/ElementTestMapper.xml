<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">

    <!--
       Mapper xml에서 사용할 수 있는 엘리먼트는 총 9가지
       <cache>, <cache-erf>, <resultMap>, <parameterMap>, <sql>, <select>, <insert>, <update>, <delete>

       <cache> 엘리먼트
       cache는 사이트에 들어갔을때 사용자가 요청할때 똑같은 내용을 계속 요청해서 가져오는게 아니라 웹상이나 마이바티스는 캐시로 저장해놓음 임시 저장 같은!
       ex) 사이트 상단에 메뉴나 로고 같은 어떤 페이지를 가도 똑같이 나오는 것들
       -->
    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>
    <!--
        <cache>와 <cache-ref>는 캐시를 설정하는 엘리먼트이다.
                    - cache는 현재 네임스페이스에 대한 캐시 설정
                    - cache-ref는 다른 네임스페이스에 대한 캐시 설정 참조를 할 때 사용
                1. 캐시란 컴퓨터 과학에서 데이터나 값을 미리 복사해놓은 임시 장소를 가리킨다.
                2. 캐시 접근 시간에 비해 원래 데이터에 접근하는 시간이 오래 걸리는 경우나, 값을 다시 계산하는 시간을 절약하고 싶을 때 사용한다.
                3. 캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.
                =============================================================================================================
                < 캐시의 디폴트 설정 >
                    1. 매퍼 XML의 모든 select 구문의 결과를 캐시에 저장한다.
                    2. 매퍼 XML의 insert, update, delete는 모두 캐시를 지운다.
                    3. 가장 오래 사용하지 않은 캐시를 지우는 알고리즘(LRU-Least Recently Used)을 사용한다.
                    4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
                    5. 캐시는 최대 1024개까지 저장한다.
                    6. 캐시는 읽기/쓰기가 모두 가능하다.
                =============================================================================================================
                < 사용 가능 속성 >
                    1. eviction : 캐시 알고리즘 속성이며 디폴트는 LRU이다. FIFO, SOFT, WEAK로도 설정 가능하다.
                    2. flushInterval : 설정된 캐시를 얼마 동안 유지할지를 밀리초 단위로, 양수로만 설정 가능하다. (여기만 지정한다고 해서 정확히 동작하지 않는다.)
                    3. size : 캐시에 저장할 객체의 수를 지정한다. 디폴트는 1024이다. (더 크게도 가능하지만 메모리가 충분한지 봐야 한다.)
                    4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않는다.
                =============================================================================================================
                < 제약사항 >
                     1. 캐시는 기본적으로 로컬캐시이므로 서버를 여러 대 두는 경우 캐시 내용이 서로 다를 수 있다.
                        따라서 서버마다 캐시 내용을 동일하게 맞추기 위해서는 분산캐시를 사용해야 한다.
                     2. 캐시의 타이머 설정은 가능한 반면 스케쥴링은 불가능하다.
                     => 이러한 제약사항을 해결하기 위해 Cachenix, Ehcache, Hazelcast, OsCache 등을 사용하지만 수업에서 다루지는 않는다.
        -->

    <!--resultType? resultMap?은 List에 어떤 제네릭 타입이 걸려있느냐에 따라서 다르게 사용-->
    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT A.MENU_NAME
        FROM   TBL_MENU A
    </select>

    <!--
    1. DB에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
            2. resultMap 엘리먼트는 MyBatis에서 가장 중요하고 강력한 엘리먼트이다.
            3. ResultSet에서 데이터를 가져올 때 작성되는 JDBC 코드를 줄여주는 역할을 한다.
               실제로 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데,
               ResultMap은 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.
            =============================================================================================================
            < resultMap 엘리먼트 속성 >
                1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 ID이다. 구분자 역할
                2. type : 결과 매핑을 적용하는 대상 객체 타입(= 매핑 구문의 결과 데이터를 저장할 Java 타입을 지정)을 의미한다. 타입지정, 풀패키지명 적고 클래스명 적는거
                3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보로 확장할 때 사용한다. (-> 부모 resultMap 아이디 사용) 반복적으로 사용하는게 적어짐
                4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지를 결정한다. (config에 설정한 전역 설정을 override하는데, 이때 디폴트는 unset)
                                auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다. (기본값 : PARTIAL)
                                NONE, PARTIAL, FULL 세 가지 옵션 설정이 가능하다.
    -->

    <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>
    <!--상속과 같음 위에 매핑한 내용을 아래와 같이 extends에 똑같이 쓰려는 id를 넣고 추가 구문 넣으면 됨 그러고 menuResultMap2를 쓰면
        map2가 상속 받은 상태랑 같은거라 menuResultMap1까지 포함해서 사용할 수 있음
        여기 다시 듣고 단어 다시 적어두기
    2일 12시 50분쯤?-->
    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT
                A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM    TBL_MENU A
        WHERE   A.ORDERABLE_STATUS = 'Y'
    </select>

    <!--
        <resultMap>의 하위 엘리먼트
            <id> : primary key 컬럼을 매핑하기 위한 태그(성능 향상)
            <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그
            <constructor> : 생성자, 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용. <idArg>, <arg>하위 엘리먼트가 있다.
            <association> : 복잡한 타입의 연관관계로 1:1 포함 관계인 경우에 사용, 1:1인가 1:다인가에 따라서 List로 오는지 일반 객체로 오는지 정해짐
                                두개 테이블에 관한 내용을 join할때 하나의 메뉴는 하나의 카테고리를 가지고 있음 그게 1:1 포함 관계
            <collection> : 복잡한 타입의 연관관계로 1:다 포함 관계인 경우에 사용
                                두개 테이블에 관한 내용을 join할때 하나의 카테고리는 여러개의 메뉴를 가지고 있음 그게 1:다 포함 관계
            <discriminator> : 조건에 따라 다른 resultMap이 매핑되도록 한다.
                                지금은 안하고 이런게 있다고만 알고 있으면 됨

    -->
    <resultMap id="menuResult3" type="com.ohgiraffers.common.MenuDTO">
        <!-- id, result 엘리먼트는 setter를 이용하기 때문에 property를 지정하지만 생성자는 순서와 타입을 맞춰서 사용해야 한다. -->
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <!--내가 넣을 컬럼명과 타입의 별칭만 넣으면 됨
                id, result 엘리먼트는 setter를 이용하기 때문에 property를 지정하지만 생성자는 순서와 타입을 맞춰서 사용해야 한다.
                객체를 인스턴스화 하는 방법
                new 연산자 사용하고 ddd.set...하는 방법이 있고(Member member = new Member)
                매개변수 이용한 생성자
                constructor는 매개변수 이용한 생성자를 이용하는거임-->

            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResult3">
        SELECT
                A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM    TBL_MENU A
        WHERE   A.ORDERABLE_STATUS = 'Y'
    </select>

    <!--<association 1:1 관계>  1번 방법 -->
    <!--    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">-->
    <!--        <id property="code" column="MENU_CODE"/>-->
    <!--        <result property="name" column="MENU_NAME"/>-->
    <!--        <result property="price" column="MENU_PRICE"/>-->
    <!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
    <!--        <association property="category" resultMap="categoryResultMap"/>-->
    <!--        &lt;!&ndash;MenuAndCategoryDTO에 category가 DTO로 선언해서 category 부르면 아래 categoryResultMap에서 매핑한 값을 넣어준다는 의미임&ndash;&gt;-->
    <!--    </resultMap>-->

    <!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.common.CategoryDTO">-->
    <!--        <id property="code" column="CATEGORY_CODE"/>-->
    <!--        <result property="name" column="CATEGORY_NAME"/>-->
    <!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->

    <!--    </resultMap>-->
    <!--<association>  2번 방법  1번 방법에서 resultMap을 두개로 나눠서 썼다면 두번째에서는 합침-->

    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" javaType="com.ohgiraffers.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>


    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT
                A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                B.CATEGORY_CODE,
                B.CATEGORY_NAME,
                B.REF_CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM    TBL_MENU A
        JOIN TBL_CATEGORY B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
        WHERE   A.ORDERABLE_STATUS = 'Y'
    </select>

    <!-- <collection> 이것도 association 처럼 두가지 방법이 있음-->
    <!--    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">-->
    <!--        <id property="code" column="CATEGORY_CODE"/>-->
    <!--        <result property="name" column="CATEGORY_NAME"/>-->
    <!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
    <!--        <collection property="menuList" resultMap="menuResultMap2"/>-->
    <!--    </resultMap>-->

    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        <collection property="menuList" ofType="com.ohgiraffers.common.MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="price" column="MENU_PRICE"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>
    </resultMap>

    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT
                A.CATEGORY_CODE,
                A.CATEGORY_NAME,
                A.REF_CATEGORY_CODE,
                B.MENU_CODE,
                B.MENU_NAME,
                B.MENU_PRICE,
                B.CATEGORY_CODE,
                B.ORDERABLE_STATUS
        FROM    TBL_CATEGORY A
        LEFT JOIN TBL_MENU B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
        ORDER BY A.CATEGORY_CODE
    </select>

    <!--<sql> 엘리먼트 - 중복된 내용을 재사용 할 수 있게 정의 하는것
            각 매핑 구문에서 공통으로 사용할 수 있는 SQL 문자열의 일부를 정의하고 재사용하기 위해 사용된다.
            extends은 매핑 관련 sql은 쿼리문 관련
    -->
    <sql id="columns">
        MENU_CODE,
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
    </sql>

    <select id="selectSqlTest" resultMap="menuResultMap2">
        SELECT
        <include refid="columns"/>
        FROM  TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!--<insert> 엘리먼트
        insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert 엘리먼트는 좀 더 많은 속성을 정의할 수 있다
        <공통 속성>
            - id : 매핑 구문을 구분하는 id이다. 인터페이스의 메소드 명 위에 id
            - parameterType : 파라미터의 타입을 지정한다. 이미 정의된 별칭을 사용하거나 클래스의 full-name을 사용한다. 써도 되고 안써도 됨 select 는 resultType, resultMap
            - flushCache : 매핑 구문을 실행할 때 캐시 삭제 여부를 설정한다. select는 캐시의 대한 내용을 저장하는게 기본, insert, update, delete는 캐시를 지우는게 디폴트
            - timeout : sql을 실행한 후 응답을 기다리는 최대 시간이다. 보통은 설정하지 않고 JDBC 드라이버 자체의 타임아웃 값을 그대로 사용한다.
                        하나의 데이터베이스에 여러명이 접속하면 insert한다고 바로 반영되는게 아니고 commit, rollback을 해야하는데 이걸 바로 안하면 대기상태가 되고
                        이 상태에서 여러 사람이 insert하면 병목현상 발생, 요청이 어느정도 쌓이면 프로그램이 락이 걸리고 무한정으로 기다리는 상태가 됨 그걸 끊어주는 역할
            - statementType : JDBC 구문 타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중 하나를 쓸 수 있으며 기본값은 PREPARED이다.
                                CALLABLE는 설명했는데 못알아들음 그냥 이런게 있다는거만 알면 됨

        <insert 추가 속성>
            - useGenerateKeys : 생성 키 값을 만들기 위해 JDBC의 getGenerateKeys 메소드를 호출할지 결정하며 기본값은 false이다.
                                autoincrement를 만들기 위해 있는..........????????????
                                10시쯤
            - keyProperty : insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의한 반환값을 설정할 프로퍼티를 지정한다.

            - keyColumn : 생성 키를 가진 테이블의 컬럼명을 설정한다.(키 컬럼이 테이블의 첫 번째 행이 아닌 데이터베이스에서만 필요하다, PostgreSQL 제외)


    -->
    <insert id="insertMenuTest" parameterType="com.ohgiraffers.common.MenuDTO">
        INSERT
                INTO TBL_MENU (
                MENU_NAME,
                MENU_PRICE,
                CATEGORY_CODE,
                ORDERABLE_STATUS
        )
        VALUES(
                #{ name },
                #{ price },
                #{ categoryCode },
                #{ orderableStatus }
        )
    </insert>

    <insert id="insertNewCategory">
        INSERT
            INTO TBL_CATEGORY(
                                CATEGORY_NAME,
                                REF_CATEGORY_CODE
                            )
        VALUES(
                #{ category.name },<!--getter 이용 name에서 값 가져와서 category에 넣어줌-->
                null
                )
    </insert>

    <insert id="insertNewMenu">
        <!--원래는 쿼리문쓰고 AUTO_INCREMENT를 설정하고 ~~~ 복잡한데-->
        <selectKey keyProperty="category.code" resultType="_int" order="BEFORE">
            SELECT LAST_INSERT_ID()<!--오토인크리먼트로 마지막 번호를 불러옴????????-->
            <!--
            AFTER 먼저 넣고 조회
            BEFORE 조회 먼저 그 다음에 넣기??????????
            11시-->
        </selectKey>
        INSERT
                INTO TBL_MENU (
                MENU_NAME,
                MENU_PRICE,
                CATEGORY_CODE,
                ORDERABLE_STATUS
                                )
        VALUES(
                #{ name },
                #{ price },
                #{ category.code },
                #{ orderableStatus }
                )
    </insert>
    <!--
    < ** 자주 사용하는 속성 ** >
    - select 엘리먼트의 경우 많이 사용되는 속성은 앞에서 다룬 속성들이다.
    - id : 매핑 구문을 구분하는 id이다.
    - parameterType : 파라미터의 타입을 의미한다. 이미 정의된 타입을 사용할 수 있고, 개발자가 정의한 타입을 사용하는 경우 full-name을 기술한다.
    - resultType : 매핑 구문의 결과 행을 반환할 타입이다. 전체 결과의 타입을 지정하는 것이 아닌 1row(하나의 행)에 해당하는 타입을 설정해야 한다.
    - resultMap : 매핑 구문의 결과 행을 미리 선언한 resultMap을 이용한다는 의미이다. 전체 행이 아닌 1row(하나의 행)에 해당하는 resultMap을 지정한다.
    =============================================================================================================
    < 자주 사용하지 않는 속성 >
    - flushCache : 구문을 호출할 때마다 캐시 삭제 여부를 설정한다.
    - useCache : 구문의 결과를 캐시한다. (기본값: true)
    - timeout : 구문을 실행하고 응답을 기다리는 최대 시간이다. 보통 설정하지 않고 JDBC 드라이버 자체의 타임아웃 값을 그대로 사용한다.
    - fetchSize : 지정된 수 만큼의 결과를 반환하게 하는 드라이버 힌트 형태의 값이다. 디폴트는 설정하지 않는 것이며 일부 드라이버는 지원하지 않는다.
    - statementType : JDBC의 구문 타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중 하나이며 디폴트는 PREPARED이다.
    - resultSetType : ResultSet의 커서 이동 방향을 지정한다. FORWARD_ONLY, SCROLL_SENSITIVE, SCROLL_INSENCITIVE 중 하나를 설정한다.
                        기본값은 FORWARD_ONLY이며, 커서가 앞으로만 이동한다.
                        SCROLL_SENSITIVE는 커서가 앞뒤로 이동할 수 있고, ResultSet 객체 생성 후 추가 및 삭제된 데이터도 볼 수 있다.
                        SCROLL_INSENSITIVE는 커서가 앞뒤로 이동할 수 있지만 ResultSet 객체 생성 후 추가 및 삭제된 데이터는 볼 수 없다.
    - databaseId : 설정된 databaseIdProvider가 있으면 MyBatis는 databaseId 속성이 없는 모든 구문을 로드하거나 일치하는 databaseId와 함께 로드한다.
                    같은 구문에서 databaseId가 있거나 없는 경우가 모두 있다면 뒤에 나온 것이 무시된다.

    -->


</mapper>