<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

<resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
    <id property="code" column="MENU_CODE"/>
    <result property="name" column="MENU_NAME"/>
    <result property="price" column="MENU_PRICE"/>
    <result property="categoryCode" column="CATEGORY_CODE"/>
    <result property="orderableStatus" column="ORDERABLE_STATUS"/>
</resultMap>

<!--if태그 : 속성에 값을 넣어야함 속성의 명칭은 test
   test속성의 조건에 해당할 떄만 엘리먼트 구문을 쿼리에 포함된다.
   =  : eqaul                  ==> eq
   >  : greater than           ==> gt
   >= : greater than equal     ==> gte
   <  : less than              ==> lt
   <= : less than equal        ==> lte
   map객체를 넘겨주는걸 명시하고 싶을때 hashmap 받아오는 결과값은 여러개일테니 resultMap으로 생성
   여기서 else는 없음 대신 choose문에 when, otherwise를 사용-->
<select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
    SELECT A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.ORDERABLE_STATUS
    FROM   TBL_MENU A
    WHERE   A.ORDERABLE_STATUS = 'Y'
    <if test="price gte 0 and price lte 10000">
        <![CDATA[
               AND A.MENU_PRICE < #{ price }
               ]]>
        <!--<는 그냥쓰면 태그의 열기로 받아들임 <게 연산에 쓰기 위한거라고 쓰기 위해선 위에 <![CDATA[]]> 를 적어줘야함
            -->
    </if>
    <if test="price gt 10000 and price lte 20000">
        AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
    </if>
    <if test="price gt 20000 and price lte 30000">
        AND A.MENU_PRICE BETWEEN 20000 AND #{ price }
    </if>
    <if test="price gt 30000">
        AND A.MENU_PRICE BETWEEN 30000 AND #{ price }
    </if>
    ORDER BY A.MENU_CODE
</select>
    <!--파라미터타입 내용 축약하기 config.xml 파일에 alias로 넣으면 됨 얘는 condition이랑 value 불러옴
    파라미터가 맵이 아닌 객체로 보냄(condition, value) -->
    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM   TBL_MENU A
        <!--'' 을 넣으면 문자열로 인식 안넣으면 다른걸로 인식함-->
        <if test="condition == 'category'">
                JOIN TBL_CATEGORY B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
                AND A.MENU_NAME LIKE CONCAT('%', #{value}, '%')<!--검색어를 포함하는거 -->
        </if>
        <if test="condition == 'category'">
                AND B.CATEGORY_NAME = #{value}
        </if>
        ORDER BY A.MENU_CODE
    </select>

    <!--<choose>(when/otherwise) 태그 : java의 swich문의 역할을 한다.
        <choose>
                <when test="조건">
                    쿼리구문
                </when>
                <when></when>....
                <otherwise>
                    조건에 부합하지 않을때의 쿼리구문
                </otherwise>

                <when>태그 test속성에 부합되면 <when> 엘리먼트 구문을 쿼리에 포함
                어떠한 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함
        </choose>-->
    <select id="searchMenuBySubCategory" resultMap="menuResultMap">
        SELECT A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM   TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND A.CATEGORY_CODE IN(1, 4, 5)
            </when>
            <when test="value =='음료'">
                AND A.CATEGORY_CODE(2)
            </when>
            <otherwise>
                AND A.CATEGORY_CODE(3)
            </otherwise>
        </choose>
        ORDER BY A.MENU_CODE
    </select>

    <select id="searchMenuByRandomMenuCode" resultMap="menuResultMap">
        <!--<foreach> 태그 : java의 for문과 같은 역할
                            1. collection 속성 : 반복을 수행할 대상
                            2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                            3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                            4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                            5. close 속성 : <foreach> 엘리먼트 구문 마지막에 올 문자-->
        SELECT A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM   TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
            AND A.MENU_CODE IN
        <!--전달 받은 맵객체(randomMenuCodeList)에 랜덤으로 받은 값이 들어 있으니 randomMenuCodeList 씀
        item 은 그냥 이름임 내가 지정한! 아래는 parameter 객체로 전달 받아서 사용하는 경우-->
<!--        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">-->
<!--            #{menuCode}-->
<!--        </foreach>-->
        <!--아래는 스태틱 메소드에 값을 집어넣고 그 값을 가져와서 사용하기
        parameter 객체로 받아오지 않고, static 필드 혹은 static 메소드에 직접 접근하여 직접 반환받아 사용할 수 있다
        - static 필드 접근 시 collection 속성 : @풀글래스명@필드명
        - static 메소드 접근 시 collection 속성 : @풀클래스명@메소드명()
        메소드를 호출해서 값을 직접 받아서 쓰겠다는 거임
        보통 잘 사용하진 않음-->
        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()"
                 item="menuCode" open="(" separator=", " close=")">
            #{menuCode}
        </foreach>
    </select>
    <!--<where>태그 : 엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여준다 또한
                     where엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
                     단, name 부분에 where를 뺴주지 않으면 where로 where이 2개 생성될 수 있다.
                     엘리먼트 구문이 AND나 OR로 시작하면 자동으로 해당 단어를 지운다.
        <trim> 태그 : 조회 조건에 AND 혹은 OR로 시작하지 않고 다른 문자로 시작하는 경우 등
                      where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
                      1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                      2. prefixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
                      3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                      4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제-->
    <select id="searchMenuByCodeOrSearchAll" resultMap="menuResultMap">
        SELECT A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM   TBL_MENU A
        <!--검색어 입력안하면 null 값일것임 condition이 null이 아니고(입력 안했으면 null) menuCode이면 인 조건임 -->
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{value}
            </where>

        </if>
    </select>

    <select id="searchMenuByNameOrCategory" resultMap="menuResultMap">
        SELECT A.MENU_CODE,
                A.MENU_NAME,
                A.MENU_PRICE,
                A.CATEGORY_CODE,
                A.ORDERABLE_STATUS
        FROM   TBL_MENU A
<!--        <if test="nameValue != null">-->

<!--        </if>-->
<!--        <if test="categoryValue != null">-->

<!--        </if>-->
        <!--방법 1-->
<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--                A.MENU_NAME LIKE CONCAT('%', #{nameValue},'%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND A.CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--            &lt;!&ndash;nameValue 가 null이 아니고 categoryValue가 null이면 nameValue에 where 붙여서 실행하고 categoryValue는 무시-->
<!--            nameValue가 null이고 categroyValue가 null이 아니면 cateogryValue 앞에 and를 무시하고 where 붙여서 쿼리문 실행해줌-->
<!--            둘 다 null이 아니면 nameValue에 where 붙여서 둘 다 실행&ndash;&gt;-->
<!--        </where>-->
        <!--방법2 trim 이용 여기 설명 다시 듣기!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->
<!--        <trim prefix = "WHERE" prefixOverrides="AND | OR">-->
<!--            <if test="nameValue != null">-->
<!--                A.MENU_NAME LIKE CONCAT('%', #{nameValue},'%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND A.CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--        </trim>-->

        <!-- <bind> 태그 : OGNL표현식을 이용하여 변수를 만든 후 바인딩 _parameter가 파라미터로 전달된 Object를 의미하며,
                            collection의 경우 get, Object의 경우 getter를 이용-->
        <trim prefix = "WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
                A.MENU_NAME LIKE #{ namePattern }
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{categoryValue}
            </if>
        </trim>
    </select>

    <update id="modifyMenu">
<!--        UPDATE -->
<!--                TBL_MENU-->
<!--        SET     MENU_NAME = #{ name },-->
<!--                CATEGORY_CODE = #{ categoryCode },-->
<!--                ORDERABLE_STATUS = #{orderableStatus}-->
<!--        WHERE MENU_CODE = #{code}-->
<!--        UPDATE-->
<!--                    TBL_MENU-->
<!--        <if test="name != null and name != ''">-->
<!--        SET     MENU_NAME = #{ name },-->
<!--        </if>-->
<!--        <if test="categoryCode != null and categoryCode gt 0">-->
<!--                CATEGORY_CODE = #{ categoryCode },-->
<!--        </if>-->
<!--        <if test="orderableStatus != null and orderableStatus != ''">-->
<!--                ORDERABLE_STATUS = #{orderableStatus}-->
<!--        </if>-->
<!--        WHERE MENU_CODE = #{code}-->

<!--        UPDATE-->
<!--        TBL_MENU-->
<!--        <set>-->
<!--            <if test="name != null and name != ''">-->
<!--                MENU_NAME = #{ name },-->
<!--            </if>-->
<!--            <if test="categoryCode != null and categoryCode gt 0">-->
<!--                CATEGORY_CODE = #{ categoryCode },-->
<!--            </if>-->
<!--            <if test="orderableStatus != null and orderableStatus != ''">-->
<!--                ORDERABLE_STATUS = #{orderableStatus}-->
<!--            </if>-->
<!--        </set>-->
<!--                WHERE MENU_CODE = #{code}-->

        UPDATE
                TBL_MENU
        <trim prefix="SET" suffixOverrides=",">
                        <if test="name != null and name != ''">
                            MENU_NAME = #{ name },
                        </if>
                        <if test="categoryCode != null and categoryCode gt 0">
                            CATEGORY_CODE = #{ categoryCode },
                        </if>
                        <if test="orderableStatus != null and orderableStatus != ''">
                            ORDERABLE_STATUS = #{orderableStatus}
                        </if>
        </trim>
                        WHERE MENU_CODE = #{code}
    </update>
</mapper>